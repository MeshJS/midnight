pragma language_version >= 0.14.0;

import CompactStandardLibrary;

export { CoinInfo };

export ledger counter: Counter;
export ledger nonce: Bytes<32>;
export ledger tvl_token: Uint<64>;

export ledger reward: QualifiedCoinInfo;  
export ledger tvl_dust: Uint<64>;
export sealed ledger owner_public_key: ZswapCoinPublicKey;

constructor(initNonce: Bytes<32>) {
  nonce = initNonce;
  owner_public_key = own_public_key();
}

export circuit mint(coin: CoinInfo): [] {
  receive(coin);
  assert coin.value == 100000000 "requires 100 * 1000000 t-dust";
  assert coin.color == native_token() "Invalid coin provided";  
  if (tvl_dust == 0) {
        reward.write_coin(coin, right<ZswapCoinPublicKey, ContractAddress>(kernel.self()));
        tvl_dust = tvl_dust + coin.value as Uint<64>;
  } else {                
        const coin_sum = merge_coin_immediate(reward, coin);
        reward.write_coin(coin_sum, right<ZswapCoinPublicKey, ContractAddress>(kernel.self()));
        tvl_dust = tvl_dust + coin.value as Uint<64>;
  }    

  counter.increment(1);
  const newNonce = evolve_nonce(counter, nonce);
  const amount = 100;
  tvl_token = tvl_token + amount as Uint<64>;
  mint_token(pad(32, "mesh_coin"), amount, newNonce, left<ZswapCoinPublicKey, ContractAddress>(own_public_key()));
  nonce = newNonce;  
}

export circuit owner_withdraw(): [] {    
  const send_result =  send(reward, left<ZswapCoinPublicKey, ContractAddress>(owner_public_key), reward.value); 
   
  tvl_dust = tvl_dust - reward.value as Uint<64>; 
  if (tvl_dust != 0) {
      reward.write_coin(send_result.change.value, right<ZswapCoinPublicKey, ContractAddress>(kernel.self()));
  }           
   
}
