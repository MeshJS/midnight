# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Publish MeshSDK Packages

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npm run lint
      - name: Build
        run: npm run build:mesh && npm run build:apps

  check-version:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      core-version-updated: ${{ steps.compare-versions.outputs.core-version-updated }}
      react-version-updated: ${{ steps.compare-versions.outputs.react-version-updated }}
      wallet-version-updated: ${{ steps.compare-versions.outputs.wallet-version-updated }}
    steps:
      - name: Checkout main branch at commit before merge
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}

      - name: Get package version from main branch before merge
        id: pre-merge-version
        run: |
          CORE_PRE_MERGE_VERSION=$(node -p "require('./packages/mesh-midnight-core/package.json').version")
          REACT_PRE_MERGE_VERSION=$(node -p "require('./packages/mesh-midnight-react/package.json').version")
          WALLET_PRE_MERGE_VERSION=$(node -p "require('./packages/mesh-midnight-wallet/package.json').version")
          
          echo "core_pre_merge_version=$CORE_PRE_MERGE_VERSION" >> "$GITHUB_OUTPUT"
          echo "react_pre_merge_version=$REACT_PRE_MERGE_VERSION" >> "$GITHUB_OUTPUT"
          echo "wallet_pre_merge_version=$WALLET_PRE_MERGE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Checkout main branch at commit after merge
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: Get package version from main branch after merge
        id: post-merge-version
        run: |
          CORE_POST_MERGE_VERSION=$(node -p "require('./packages/mesh-midnight-core/package.json').version")
          REACT_POST_MERGE_VERSION=$(node -p "require('./packages/mesh-midnight-react/package.json').version")
          WALLET_POST_MERGE_VERSION=$(node -p "require('./packages/mesh-midnight-wallet/package.json').version")
          echo "core_post_merge_version=$CORE_POST_MERGE_VERSION" >> "$GITHUB_OUTPUT"
          echo "react_post_merge_version=$REACT_POST_MERGE_VERSION" >> "$GITHUB_OUTPUT"
          echo "wallet_post_merge_version=$WALLET_POST_MERGE_VERSION" >> "$GITHUB_OUTPUT"
          
      - name: Compare versions
        id: compare-versions
        run: |
          if [[ "${{ steps.pre-merge-version.outputs.core_pre_merge_version }}" != "${{ steps.post-merge-version.outputs.core_post_merge_version }}" ]]; then
              echo "core-version-updated=true" >> "$GITHUB_OUTPUT"
          else
              echo "core-version-updated=false" >> "$GITHUB_OUTPUT"
          fi
          if [[ "${{ steps.pre-merge-version.outputs.react_pre_merge_version }}" != "${{ steps.post-merge-version.outputs.react_post_merge_version }}" ]]; then
              echo "react-version-updated=true" >> "$GITHUB_OUTPUT"
          else
              echo "react-version-updated=false" >> "$GITHUB_OUTPUT"
          fi
          if [[ "${{ steps.pre-merge-version.outputs.wallet_pre_merge_version }}" != "${{ steps.post-merge-version.outputs.wallet_post_merge_version }}" ]]; then
              echo "wallet-version-updated=true" >> "$GITHUB_OUTPUT"
          else
              echo "wallet-version-updated=false" >> "$GITHUB_OUTPUT"
          fi

  
  publish-meshsdk-core:
    needs: [build, check-version]
    if: needs.check-version.outputs.core-version-updated == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - run: npm install && npm run build
      - run: cd packages/mesh-midnight-core && npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}

  publish-meshsdk-react:
    needs: [build, check-version]
    if: needs.check-version.outputs.react-version-updated == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - run: npm install && npm run build
      - run: cd packages/mesh-midnight-react && npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}

  publish-meshsdk-wallet:
    needs: [build, check-version]
    if: needs.check-version.outputs.wallet-version-updated == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - run: npm install && npm run build
      - run: cd packages/mesh-midnight-wallet && npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
